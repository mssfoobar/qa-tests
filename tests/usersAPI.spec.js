import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Global variables to store IDs and the access token
let accessToken;
let createdUserId;

// Define test user data
const testUser = {
  username: `testuser-${Date.now()}`, // Unique username for each test run
  firstName: 'Test',
  lastName: 'User',
  email: `testuser-${Date.now()}@example.com`,
  enabled: true,
};

// Define updated user data
const updatedUser = {
  firstName: 'Updated',
  lastName: 'User',
};

// Define new password data
const newPassword = {
  value: 'P@ssw0rd123',
  temporary: false,
};

test.describe('IAMS Users API', () => {

  test.beforeAll(() => {
    try {
      // Read the access token from the file generated by global-setup.js
      const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
      accessToken = authFile.accessToken;
      if (!accessToken) {
        throw new Error('Access token not found in auth.json');
      }
      console.log('Successfully loaded access token.');
    } catch (error) {
      console.error('Failed to load access token:', error);
      throw error; // Stop tests if the token is not available
    }
  });

  // This hook runs after all tests to ensure the created user is deleted
  test.afterAll(async ({ request }) => {
    if (createdUserId) {
      const cleanupResponse = await request.delete(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });
      // The API returns 200 OK for a successful delete, so we should check for both 200 and 204.
      if (cleanupResponse.status() === 204 || cleanupResponse.status() === 200) {
        console.log(`Cleaned up user with ID: ${createdUserId}`);
      } else {
        console.error(`Failed to clean up user with ID: ${createdUserId}, Status: ${cleanupResponse.status()}`);
      }
    }
  });

  // --- Test Cases ---

  test.describe.serial('User CRUD Operations', () => {

    test('1. POST /admin/users - Create a new user', async ({ request }) => {
      const response = await request.post(`https://iams.qa.agilopshub.com/admin/users`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
        data: testUser,
      });

      expect(response.status()).toBe(201); // 201 Created

      let userId;
      const userLocation = response.headers()['location'];

      if (userLocation) {
        // If the location header is present, we get the ID from there.
        userId = userLocation.split('/').pop();
        console.log(`User ID from Location header: ${userId}`);
      } else {
        // If no location header, we grab the ID directly from the plain text body.
        userId = await response.text();
        console.log(`User ID from plain text response body: ${userId}`);
      }

      // Assert that we successfully found an ID.
      expect(userId).toBeDefined();

      createdUserId = userId;
      console.log(`User created with ID: ${createdUserId}`);
    });

    test('2. GET /admin/users/{userId} - Get representation of the user', async ({ request }) => {
      expect(createdUserId).toBeDefined();

      const response = await request.get(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });

      expect(response.status()).toBe(200); // 200 OK
      const userData = await response.json();
      expect(userData.username).toBe(testUser.username);
      expect(userData.firstName).toBe(testUser.firstName);
    });

    test('3. PUT /admin/users/{userId} - Update the user', async ({ request }) => {
      expect(createdUserId).toBeDefined();

      const response = await request.put(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
        data: {
          ...testUser, // Start with existing user data
          id: createdUserId, // Must include ID for PUT
          firstName: updatedUser.firstName,
          lastName: updatedUser.lastName,
        },
      });

      // The API is returning a 200 OK for a successful PUT, so we will update the expectation.
      expect(response.status()).toBe(200); // 200 OK
      console.log(`User ID ${createdUserId} updated successfully.`);
    });

    test('4. PUT /admin/users/{userId}/reset-password - Set up a new password', async ({ request }) => {
      expect(createdUserId).toBeDefined();

      const response = await request.put(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}/reset-password`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
        data: newPassword,
      });

      expect(response.status()).toBe(200); // 204 No Content
      console.log(`Password for user ID ${createdUserId} reset successfully.`);
    });

    test('5. GET /admin/users - List users and check for the new user', async ({ request }) => {
      const response = await request.get(`https://iams.qa.agilopshub.com/admin/users`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });

      expect(response.status()).toBe(200); // 200 OK
      const usersList = await response.json();
      const foundUser = usersList.find(user => user.username === testUser.username);
      expect(foundUser).toBeDefined();
      expect(foundUser.firstName).toBe(updatedUser.firstName);
    });

    test('6. DELETE /admin/users/{userId} - Delete the user', async ({ request }) => {
      expect(createdUserId).toBeDefined();

      const response = await request.delete(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });

      expect(response.status()).toBe(200); // 204 No Content
      console.log(`User ID ${createdUserId} deleted successfully.`);
    });

    test('7. GET /admin/users/{userId} - Verify user is deleted', async ({ request }) => {
      expect(createdUserId).toBeDefined();

      const response = await request.get(`https://iams.qa.agilopshub.com/admin/users/${createdUserId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });

      expect(response.status()).toBe(404); // 404 Not Found
      console.log(`Verified user ID ${createdUserId} is no longer found.`);
    });
  });
});
