// @ts-check
import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

// Global variables to store IDs and the access token
let accessToken;
let createdTenantId;
let createdUser1Id;
let createdUser2Id;

// Helper function to handle different response body types
async function getResponseBody(response) {
    const contentType = response.headers()['content-type'] || '';
    if (contentType.includes('application/json')) {
        try {
            return await response.json();
        } catch (e) {
            console.error('Failed to parse JSON response:', e);
            return await response.text();
        }
    } else {
        return await response.text();
    }
}

test.describe('Tenant Admin Role Assignment and Unassignment', () => {
    // Setup hook to create a tenant and two users before all tests
    test.beforeAll(async ({ request }) => {
        // Read the access token from the file generated by global-setup.js
        const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
        accessToken = authFile.accessToken;
        if (!accessToken) {
            throw new Error('Access token not found in auth.json');
        }
        console.log("Access Token found successfully.");

        // 1. Create a new tenant
        const newTenantName = `TestTenant_${Date.now()}`;
        console.log("Creating tenant with name:", newTenantName);
        const postTenantResponse = await request.post(`https://iams.qa.agilopshub.com/admin/tenants`, {
            headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json' },
            data: { name: newTenantName },
        });
        expect(postTenantResponse.status()).toBe(201);
        const tenantResponseData = await getResponseBody(postTenantResponse);
        createdTenantId = (typeof tenantResponseData === 'object' && tenantResponseData.id) ? tenantResponseData.id : tenantResponseData.trim();
        console.log("Created Tenant ID:", createdTenantId);
        
        // 2. Create the first global user
        const newUserData1 = { username: `user1-${Date.now()}`, firstName: 'User', lastName: 'One', email: `user1-${Date.now()}@example.com`, enabled: true, };
        const postUserResponse1 = await request.post(`https://iams.qa.agilopshub.com/admin/users`, {
            headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json' }, data: newUserData1,
        });
        expect(postUserResponse1.status()).toBe(201);
        const userResponseData1 = await getResponseBody(postUserResponse1);
        createdUser1Id = (typeof userResponseData1 === 'object' && userResponseData1.id) ? userResponseData1.id : userResponseData1.trim();
        console.log("Created User 1 ID:", createdUser1Id);

        // 3. Create the second global user
        const newUserData2 = { username: `user2-${Date.now()}`, firstName: 'User', lastName: 'Two', email: `user2-${Date.now()}@example.com`, enabled: true, };
        const postUserResponse2 = await request.post(`https://iams.qa.agilopshub.com/admin/users`, {
            headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json' }, data: newUserData2,
        });
        expect(postUserResponse2.status()).toBe(201);
        const userResponseData2 = await getResponseBody(postUserResponse2);
        createdUser2Id = (typeof userResponseData2 === 'object' && userResponseData2.id) ? userResponseData2.id : userResponseData2.trim();
        console.log("Created User 2 ID:", createdUser2Id);

        // 4. Create a tenant membership for both users
        console.log(`Creating tenant memberships for users ${createdUser1Id} and ${createdUser2Id}.`);
        const addUser1ToTenantResponse = await request.post(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/memberships/${createdUser1Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json' },
            data: { role: 'member' },
        });
        expect(addUser1ToTenantResponse.status()).toBe(201);
        
        const addUser2ToTenantResponse = await request.post(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/memberships/${createdUser2Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json' },
            data: { role: 'member' },
        });
        expect(addUser2ToTenantResponse.status()).toBe(201);

        console.log(`Users ${createdUser1Id} and ${createdUser2Id} successfully assigned as members to tenant ${createdTenantId}.`);
    });

    // Teardown hook to clean up the created tenant and users after all tests
    test.afterAll(async ({ request }) => {
        if (createdUser1Id) { await request.delete(`https://iams.qa.agilopshub.com/admin/users/${createdUser1Id}`, { headers: { 'Authorization': `Bearer ${accessToken}` } }); }
        if (createdUser2Id) { await request.delete(`https://iams.qa.agilopshub.com/admin/users/${createdUser2Id}`, { headers: { 'Authorization': `Bearer ${accessToken}` } }); }
        if (createdTenantId) { await request.delete(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}`, { headers: { 'Authorization': `Bearer ${accessToken}` } }); }
        console.log('Cleanup complete.');
    });

    test('Full lifecycle: Assign, list, count, and unassign tenant admin role', async ({ request }) => {
        // Step 1: Assign 'tenant-admin' role to both users
        console.log("Assigning 'tenant-admin' role to both users.");
        const assignRoleResponse1 = await request.post(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users/${createdUser1Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(assignRoleResponse1.status()).toBe(201);

        const assignRoleResponse2 = await request.post(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users/${createdUser2Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(assignRoleResponse2.status()).toBe(201);
        
        // Step 2: List all tenant administrators and get the count
        console.log("Getting list of tenant administrators to verify count.");
        const getAdminsResponse = await request.get(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(getAdminsResponse.status()).toBe(200);

        const adminListBefore = await getAdminsResponse.json();
        console.log(`Initial tenant administrators count: ${adminListBefore.length}`);
        
        expect(adminListBefore.some(user => user.id === createdUser1Id)).toBe(true);
        expect(adminListBefore.some(user => user.id === createdUser2Id)).toBe(true);
        expect(adminListBefore.length).toBeGreaterThanOrEqual(2); // At least our two users

        // Step 3: Unassign the 'tenant-admin' role from both users
        console.log("Unassigning 'tenant-admin' role from both users.");
        const unassignRoleResponse1 = await request.delete(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users/${createdUser1Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(unassignRoleResponse1.status()).toBe(200);

        const unassignRoleResponse2 = await request.delete(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users/${createdUser2Id}`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(unassignRoleResponse2.status()).toBe(200);

        // Step 4: Verify the unassignment by listing the administrators again
        console.log("Verifying unassignment by listing administrators again.");
        const getAdminsAfterResponse = await request.get(`https://iams.qa.agilopshub.com/admin/tenants/${createdTenantId}/tenant-admin/users`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        expect(getAdminsAfterResponse.status()).toBe(200);

        const adminListAfter = await getAdminsAfterResponse.json();
        console.log(`Final tenant administrators count: ${adminListAfter.length}`);
        
        expect(adminListAfter.some(user => user.id === createdUser1Id)).toBe(false);
        expect(adminListAfter.some(user => user.id === createdUser2Id)).toBe(false);
    });
});
