// tests/tenantsAPI.spec.js
import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

let newTenantId;
let accessToken;

test.describe('IAMS Tenants API', () => {

  test.beforeAll(() => {
    try {
      // Read the access token from the file generated by global-setup.js
      const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
      accessToken = authFile.accessToken;
      if (!accessToken) {
        throw new Error('Access token not found in auth.json');
      }
      console.log('Successfully loaded access token for tests.');
    } catch (error) {
      console.error('Failed to load access token:', error);
      throw error; // Stop tests if the token is not available
    }
  });

  // This block runs after all tests in this file to ensure cleanup
  test.afterAll(async ({ request }) => {
    // This hook ensures the tenant is deleted, even if a test fails
    if (newTenantId) {
      await request.delete(`/admin/tenants/${newTenantId}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      console.log(`Cleaned up tenant with ID: ${newTenantId}`);
    }
  });

  test('should create a new tenant and then perform all other operations', async ({ request }) => {
    const newTenantName = `TestTenant_${Date.now()}`;

    // POST: Create a new tenant with the Authorization header
    const postResponse = await request.post('/admin/tenants', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      data: { name: newTenantName },
    });

    const status = postResponse.status();
    expect(status).toBe(201);
    newTenantId = await postResponse.text();
    expect(typeof newTenantId).toBe('string');
    console.log(`Created tenant with ID: ${newTenantId}`);

    // GET: Retrieve the newly created tenant by ID
    const getResponse = await request.get(`/admin/tenants/${newTenantId}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
    expect(getResponse.status()).toBe(200);
    const tenant = await getResponse.json();
    expect(tenant.id).toBe(newTenantId);
    expect(tenant.name).toBe(newTenantName);

    // GET: Get a count of tenants and verify the new tenant is found
    const searchCountResponse = await request.get(`/admin/tenants/count?search=${newTenantName}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
    const searchCount = parseInt(await searchCountResponse.text(), 10);
    expect(searchCount).toBe(1);

    // GET: Get a list of tenants and find the new tenant
    const listResponse = await request.get('/admin/tenants', {
      params: { search: newTenantName },
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
    expect(listResponse.status()).toBe(200);
    const tenantsList = await listResponse.json();
    const foundTenant = tenantsList.find(t => t.id === newTenantId);
    expect(foundTenant).toBeDefined();
    expect(foundTenant.name).toBe(newTenantName);

    // DELETE: Clean up the tenant
const deleteResponse = await request.delete(`/admin/tenants/${newTenantId}`, {
  headers: {
    'Authorization': `Bearer ${accessToken}`,
  },
});
// The API returns 200 for a successful deletion, so we update the expectation.
expect(deleteResponse.status()).toBe(200);
    console.log(`Deleted tenant with ID: ${newTenantId}`);
    
    // Reset the global variable since the tenant is now deleted
    newTenantId = null;

    // GET: Verify the tenant is no longer found (expect a 404)
    const getDeletedResponse = await request.get(`/admin/tenants/${newTenantId}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });
    expect(getDeletedResponse.status()).toBe(404);
  });
});
