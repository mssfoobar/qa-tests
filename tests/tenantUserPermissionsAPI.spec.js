// tenantsUserPermissionsAPI.spec.js
import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Define the base URL for the API
const BASE_URL = 'https://iams.qa.agilopshub.com';

// Variables to store the tenant and user IDs for cleanup
let tenantId = '';
let userId = '';
let accessToken = '';

test.describe('IAMS Tenant User Permissions API', () => {

  // Setup hook to create a temporary tenant and user before all tests in this describe block
  test.beforeAll(async ({ request }) => {
    try {
      // Read the access token from the file generated by global-setup.js
      const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
      accessToken = authFile.accessToken;

      if (!accessToken) {
        throw new Error('Access token not found in auth.json');
      }
      
      // Create a temporary tenant for testing
      console.log('Attempting to create a temporary tenant...');
      const createTenantResponse = await request.post(`${BASE_URL}/admin/tenants`, {
        headers: { 'Authorization': `Bearer ${accessToken}` },
        data: {
          "tenantId": `test_tenant_${Date.now()}`,
          "name": "Test Tenant for User Permissions",
          "description": "Tenant for user permissions API tests"
        }
      });
      
      // Log the response status and raw text for debugging
      const createTenantResponseBody = await createTenantResponse.text();
      console.log(`Create Tenant Response Status: ${createTenantResponse.status()}`);
      console.log(`Create Tenant Response Body: ${createTenantResponseBody}`);

      expect(createTenantResponse.ok()).toBeTruthy();
      
      // Attempt to parse the response body as JSON with error handling
      let createdTenant;
      try {
        createdTenant = JSON.parse(createTenantResponseBody);
      } catch (e) {
        console.error('Failed to parse JSON response for tenant creation:', e);
        throw new Error(`API returned invalid JSON for tenant creation: ${createTenantResponseBody}`);
      }
      
      tenantId = createdTenant.id;
      console.log(`Created temporary tenant with ID: ${tenantId}`);

      // Create a temporary user for testing
      console.log('Attempting to create a temporary user...');
      const createUserResponse = await request.post(`${BASE_URL}/admin/users`, {
        headers: { 'Authorization': `Bearer ${accessToken}` },
        data: {
          "email": `testuser${Date.now()}@test.com`,
          "name": "Test User",
          "password": "Password123!"
        }
      });
      
      console.log(`Create User Response Status: ${createUserResponse.status()}`);
      if (!createUserResponse.ok()) {
        const responseText = await createUserResponse.text();
        console.error(`Create User Response Body: ${responseText}`);
      }
      expect(createUserResponse.ok()).toBeTruthy();
      
      let createdUser = await createUserResponse.json();
      userId = createdUser.id;
      console.log(`Created temporary user with ID: ${userId}`);

      // Add the user to the tenant
      console.log(`Attempting to add user ${userId} to tenant ${tenantId}...`);
      const addUserToTenantResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}`, {
        headers: { 'Authorization': `Bearer ${accessToken}` }
      });
      console.log(`Add User to Tenant Response Status: ${addUserToTenantResponse.status()}`);
      expect(addUserToTenantResponse.ok()).toBeTruthy();
      console.log(`Added user ${userId} to tenant ${tenantId}`);

    } catch (error) {
      console.error('An error occurred during beforeAll setup:', error);
      // Re-throw the error to fail the test run
      throw error;
    }
  });

  // Cleanup hook to delete the temporary tenant and user after all tests in this describe block
  test.afterAll(async ({ request }) => {
    // Delete the temporary user
    const userCleanupResponse = await request.delete(`${BASE_URL}/admin/users/${userId}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`User cleanup status: ${userCleanupResponse.status()}`);

    // Delete the temporary tenant
    const tenantCleanupResponse = await request.delete(`${BASE_URL}/admin/tenants/${tenantId}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`Tenant cleanup status: ${tenantCleanupResponse.status()}`);
    console.log(`Cleaned up tenant with ID: ${tenantId}`);
  });

  test('Full user permissions lifecycle: EVALUATE, GET all, GET specific', async ({ request }) => {
    
    // Test data
    const resourceId = 'test_resource_1';
    const scopeId = 'read';
    const roleId = 'admin'; // Assuming 'admin' role exists and is assigned to the user

    // Add a permission to the user
    console.log('Adding permission to the user for evaluation tests...');
    const putUserPermissionResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/users`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: [userId]
    });
    expect(putUserPermissionResponse.ok()).toBeTruthy();
    
    // 1. Evaluate permission for user with specific role
    console.log(`Evaluating user permission with role: ${roleId}`);
    const evaluateWithRoleResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}/roles/${roleId}/resources/${resourceId}/scopes/${scopeId}/evaluate`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    expect(evaluateWithRoleResponse.ok()).toBeTruthy();
    const evaluationResult1 = await evaluateWithRoleResponse.json();
    expect(evaluationResult1).toBe("PERMIT");

    // 2. Evaluate permission for a user directly by resource and scope
    console.log('Evaluating user permission directly by resource and scope...');
    const evaluateResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}/resources/${resourceId}/scopes/${scopeId}/evaluate`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    expect(evaluateResponse.ok()).toBeTruthy();
    const evaluationResult2 = await evaluateResponse.json();
    expect(evaluationResult2).toBe("PERMIT");
    
    // 3. List all resources and scopes for the specified user
    console.log('Listing all resources and scopes for the user...');
    const listResourcesResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}/resources`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    expect(listResourcesResponse.ok()).toBeTruthy();
    const userResources = await listResourcesResponse.json();
    // Verify the added resource and scope are in the list
    expect(userResources.some(r => 
      r.id === resourceId && r.allowedScopes.some(s => s.id === scopeId)
    )).toBeTruthy();

    // 4. List all access scopes that a user has on a tenant resource
    console.log(`Listing all scopes for resource: ${resourceId}`);
    const listScopesResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}/resources/${resourceId}/scopes`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    expect(listScopesResponse.ok()).toBeTruthy();
    const userScopes = await listScopesResponse.json();
    // Verify the added scope is in the list
    expect(userScopes.some(s => s.id === scopeId)).toBeTruthy();
  });
});
