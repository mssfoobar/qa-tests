import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Define a base URL for the API endpoints. You might want to move this to a config file.
const BASE_URL = 'http://10.10.10.11:8080/api/v1';

let newGroupId;
let accessToken;

test.describe('Tenant Groups API Tests', () => {

    // Set a longer timeout for this specific test suite
    test.setTimeout(120000); // 120 seconds

    // Setup hook to read the access token before all tests in this describe block
    test.beforeAll(async () => {
        try {
            // Read the access token from the file generated by global-setup.js
            const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
            accessToken = authFile.accessToken;
            if (!accessToken) {
                throw new Error('Access token not found in auth.json');
            }
            console.log("Access Token loaded successfully.");
        } catch (error) {
            console.error("Failed to load access token:", error.message);
            throw error; // Terminate the test run if the token cannot be loaded
        }
    });

    // Test to create a new tenant group
    test('should create a new tenant group', async ({ request }) => {
        const createGroupData = {
            name: `TestGroup-${Date.now()}`,
            description: "Playwright API test group"
        };
        // Corrected API endpoint from '/group' to '/tenant-group'
        const response = await request.post(`${BASE_URL}/tenant-group`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: createGroupData
        });

        // Assert that the response status is 201 (Created)
        expect(response.status()).toBe(201);
        const responseBody = await response.json();

        // Assert that the response contains the new group details and an ID
        expect(responseBody).toMatchObject({
            name: createGroupData.name,
            description: createGroupData.description
        });
        expect(responseBody.id).toBeDefined();

        // Store the new group's ID for subsequent tests
        newGroupId = responseBody.id;
    });

    // Test to get the list of tenant groups and verify the newly created group is in the list
    test('should retrieve the list of groups and find the new group', async ({ request }) => {
        // Use the stored group ID to ensure the group exists before trying to find it
        expect(newGroupId).toBeDefined();

        // Corrected API endpoint from '/group' to '/tenant-group'
        const response = await request.get(`${BASE_URL}/tenant-group?page=0&size=10`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        // Assert that the response status is 200 (OK)
        expect(response.status()).toBe(200);
        const responseBody = await response.json();

        // Assert that the total count is greater than 0
        expect(responseBody.totalElements).toBeGreaterThan(0);

        // Assert that the newly created group ID is present in the content array
        const groupFound = responseBody.content.some(group => group.id === newGroupId);
        expect(groupFound).toBe(true);
    });

    // Test to get group details by ID
    test('should get group details by ID', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        // Corrected API endpoint from '/group' to '/tenant-group'
        const response = await request.get(`${BASE_URL}/tenant-group/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        // Assert that the response status is 200 (OK)
        expect(response.status()).toBe(200);
        const responseBody = await response.json();

        // Assert that the retrieved group's ID matches the new group's ID
        expect(responseBody.id).toBe(newGroupId);
    });

    // Test to update an existing tenant group
    test('should update an existing tenant group', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        const updatedData = {
            name: `TestGroup-Updated-${Date.now()}`,
            description: "Updated description for test group",
            id: newGroupId
        };

        // Corrected API endpoint from '/group' to '/tenant-group'
        const response = await request.put(`${BASE_URL}/tenant-group/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: updatedData
        });

        // Assert that the response status is 200 (OK)
        expect(response.status()).toBe(200);
        const responseBody = await response.json();

        // Assert that the response body reflects the updated data
        expect(responseBody).toMatchObject({
            name: updatedData.name,
            description: updatedData.description,
            id: newGroupId
        });
    });

    // Test to assign a user to a group
    test('should assign a user to the group', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        // NOTE: Replace 'mockUserId' with a real user ID from your system
        const mockUserId = 'mockUserId12345';
        const assignmentData = {
            groupId: newGroupId,
            userIds: [mockUserId]
        };

        const response = await request.post(`${BASE_URL}/group/assignUserToGroup`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: assignmentData
        });

        // Assert that the assignment was successful (status 200)
        expect(response.status()).toBe(200);
    });

    // Test to assign a role to a group
    test('should assign a role to the group', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        // NOTE: Replace 'mockRoleId' with a real role ID from your system
        const mockRoleId = 'mockRoleId12345';
        const assignmentData = {
            groupId: newGroupId,
            roleIds: [mockRoleId]
        };

        const response = await request.post(`${BASE_URL}/group/assignRoleToGroup`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: assignmentData
        });

        // Assert that the assignment was successful (status 200)
        expect(response.status()).toBe(200);
    });

    // Test to assign a subgroup to a group
    test('should assign a subgroup to the group', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        // NOTE: Replace 'mockSubgroupId' with a real subgroup ID from your system
        const mockSubgroupId = 'mockSubgroupId12345';
        const assignmentData = {
            groupId: newGroupId,
            subgroupIds: [mockSubgroupId]
        };

        const response = await request.post(`${BASE_URL}/group/assignSubGroup`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: assignmentData
        });

        // Assert that the assignment was successful (status 200)
        expect(response.status()).toBe(200);
    });

    // Test to delete the created tenant group
    test('should delete the tenant group', async ({ request }) => {
        // Use the stored group ID from the creation test
        expect(newGroupId).toBeDefined();

        // Corrected API endpoint from '/group' to '/tenant-group'
        const response = await request.delete(`${BASE_URL}/tenant-group/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        // Assert that the response status is 200 (OK)
        expect(response.status()).toBe(200);

        // Optionally, try to get the group again to confirm it's deleted
        const getResponse = await request.get(`${BASE_URL}/tenant-group/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        expect(getResponse.status()).toBe(404);
    });
});
