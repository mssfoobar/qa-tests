// tenantsResourcePermissionsAPI.spec.js
import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Define the base URL for the API
const BASE_URL = 'https://iams.qa.agilopshub.com';

// Variables to store the tenant and user IDs for cleanup
let tenantId = '';
let userId = '';
let accessToken = '';

test.describe('IAMS Tenant Resource Permissions API', () => {

  // Setup hook to create a temporary tenant and user before all tests in this describe block
  test.beforeAll(async ({ request }) => {
    // Read the access token from the file generated by global-setup.js
    const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
    accessToken = authFile.accessToken;

    if (!accessToken) {
      throw new Error('Access token not found in auth.json');
    }
    
    // Create a temporary tenant for testing
    const createTenantResponse = await request.post(`${BASE_URL}/admin/tenants`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: {
        "tenantId": "test_tenant_" + Date.now(),
        "name": "Test Tenant for Resource Permissions",
        "description": "Tenant for resource permissions API tests"
      }
    });
    expect(createTenantResponse.ok()).toBeTruthy();
    const createdTenant = await createTenantResponse.json();
    tenantId = createdTenant.id;
    console.log(`Created temporary tenant with ID: ${tenantId}`);

    // Create a temporary user for testing
    const createUserResponse = await request.post(`${BASE_URL}/admin/users`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: {
        "email": `testuser${Date.now()}@test.com`,
        "name": "Test User",
        "password": "Password123!"
      }
    });
    expect(createUserResponse.ok()).toBeTruthy();
    const createdUser = await createUserResponse.json();
    userId = createdUser.id;
    console.log(`Created temporary user with ID: ${userId}`);

    // Add the user to the tenant
    const addUserToTenantResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/users/${userId}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    expect(addUserToTenantResponse.ok()).toBeTruthy();
    console.log(`Added user ${userId} to tenant ${tenantId}`);

  });

  // Cleanup hook to delete the temporary tenant and user after all tests in this describe block
  test.afterAll(async ({ request }) => {
    // Delete the temporary user
    const userCleanupResponse = await request.delete(`${BASE_URL}/admin/users/${userId}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`User cleanup status: ${userCleanupResponse.status()}`);

    // Delete the temporary tenant
    const tenantCleanupResponse = await request.delete(`${BASE_URL}/admin/tenants/${tenantId}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`Tenant cleanup status: ${tenantCleanupResponse.status()}`);
    console.log(`Cleaned up tenant with ID: ${tenantId}`);
  });

  test('Full resource permissions lifecycle: PUT and GET', async ({ request }) => {
    
    // Define test data
    const resourceId = 'test_resource_1';
    const scopeId = 'read';

    // PUT endpoint to update user permissions
    console.log(`Attempting to update user permissions for tenant: ${tenantId}, user: ${userId}`);
    const putUserPermissionResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/users`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: [userId]
    });
    console.log(`PUT user permissions status: ${putUserPermissionResponse.status()}`);
    expect(putUserPermissionResponse.ok()).toBeTruthy();

    // GET endpoint to list user permissions
    console.log('Attempting to get user permissions...');
    const getUserPermissionsResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/users`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`GET user permissions status: ${getUserPermissionsResponse.status()}`);
    const userPermissions = await getUserPermissionsResponse.json();
    expect(getUserPermissionsResponse.ok()).toBeTruthy();
    expect(userPermissions).toContain(userId);

    // PUT endpoint to update role permissions
    // Assuming a role with the name "admin" exists
    const roleId = 'admin';
    console.log(`Attempting to update role permissions for tenant: ${tenantId}, role: ${roleId}`);
    const putRolePermissionResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/roles`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: [{ "id": roleId, "required": true }]
    });
    console.log(`PUT role permissions status: ${putRolePermissionResponse.status()}`);
    expect(putRolePermissionResponse.ok()).toBeTruthy();

    // GET endpoint to list role permissions
    console.log('Attempting to get role permissions...');
    const getRolePermissionsResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/roles`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`GET role permissions status: ${getRolePermissionsResponse.status()}`);
    const rolePermissions = await getRolePermissionsResponse.json();
    expect(getRolePermissionsResponse.ok()).toBeTruthy();
    expect(rolePermissions.some(role => role.id === roleId)).toBeTruthy();
    
    // PUT endpoint to update group permissions
    // Assuming a group with the name "developers" exists
    const groupId = 'developers';
    console.log(`Attempting to update group permissions for tenant: ${tenantId}, group: ${groupId}`);
    const putGroupPermissionResponse = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/groups`, {
      headers: { 'Authorization': `Bearer ${accessToken}` },
      data: [{ "id": groupId, "required": true, "extendChildren": true }]
    });
    console.log(`PUT group permissions status: ${putGroupPermissionResponse.status()}`);
    expect(putGroupPermissionResponse.ok()).toBeTruthy();

    // GET endpoint to list group permissions
    console.log('Attempting to get group permissions...');
    const getGroupPermissionsResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/resources/${resourceId}/scopes/${scopeId}/permissions/groups`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`GET group permissions status: ${getGroupPermissionsResponse.status()}`);
    const groupPermissions = await getGroupPermissionsResponse.json();
    expect(getGroupPermissionsResponse.ok()).toBeTruthy();
    expect(groupPermissions.some(group => group.id === groupId)).toBeTruthy();
  });
});
