import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Base URL for the API
const BASE_URL = 'https://iams.qa.agilopshub.com';

let accessToken;

test.describe('Tenant Creation API Test', () => {

    test.beforeAll(async () => {
        try {
            // Read the access token from the file generated by global-setup.js
            const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
            accessToken = authFile.accessToken;
            if (!accessToken) {
                throw new Error('Access token not found in auth.json');
            }
            console.log("Access Token loaded successfully.");
        } catch (error) {
            console.error("Failed to load access token:", error.message);
            throw error; // Terminate the test run if the token cannot be loaded
        }
    });

    test('should create a new tenant and save its ID', async ({ request }) => {
        const tenantName = `TestTenant-${Date.now()}`;
        const createTenantData = {
            name: tenantName,
            description: "Playwright API test tenant"
        };
        // Correct API endpoint for creating a tenant
        const response = await request.post(`${BASE_URL}/admin/tenants`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: createTenantData
        });

        console.log(`Response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        // Assert that the response status is 201 (Created)
        expect(response.status()).toBe(201);
        
        // Get the response body as plain text
        const responseBodyText = await response.text();
        const tenantId = responseBodyText.trim(); // Trim any whitespace

        // Since the API returns the raw ID, we don't parse it as JSON.
        // We just assert that it's a valid ID string.
        console.log(`Received raw tenant ID: ${tenantId}`);
        expect(tenantId).toMatch(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);
        
        // Ensure the data directory exists
        const dataDir = path.join(__dirname, '..', 'data');
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir);
        }

        // Save the tenant ID to a file so it can be used in other tests
        fs.writeFileSync(path.join(dataDir, 'tenant.json'), JSON.stringify({ tenantId }));
        console.log(`Tenant ID ${tenantId} saved to data/tenant.json`);
    });
});
