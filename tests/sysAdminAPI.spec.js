// tests/sysAdminAPI.spec.js
import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

let newUser;
let accessToken;

test.describe('System Admin Management API', () => {
  // Before all tests, get the access token and create a new user.
  test.beforeAll(async ({ request }) => {
    try {
      // Read the access token from the file generated by global-setup.js
      const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
      accessToken = authFile.accessToken;
      if (!accessToken) {
        throw new Error('Access token not found in auth.json');
      }
    } catch (error) {
      console.error('Failed to load access token:', error);
      throw error;
    }

    // Create a new user with the required Authorization header
    const newUserData = {
      username: `sysadmin_user_${Date.now()}`,
      firstName: `System`,
      lastName: `Admin`,
      email: `sysadmin_user_${Date.now()}@example.com`,
      enabled: true,
      emailVerified: true,
      attributes: {},
    };

    const postResponse = await request.post('/admin/users', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      data: newUserData,
    });
    expect(postResponse.status()).toBe(201);
    const userId = await postResponse.text();
   // console.log(userId);
    const getResponse = await request.get(`/admin/users/${userId}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
    expect(getResponse.status()).toBe(200);
    newUser = await getResponse.json();
    console.log(`Created user for testing sys-admin role: ${newUser.id}`);
  });

  // After all tests, clean up the created user.
  test.afterAll(async ({ request }) => {
    if (newUser && newUser.id) {
      const deleteResponse = await request.delete(`/admin/users/${newUser.id}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      });
      expect(deleteResponse.status()).toBe(200);
      console.log(`Deleted user after sys-admin test: ${newUser.id}`);
    }
  });

  test('should assign a user the System Admin role and then unassign it', async ({ request }) => {
    // POST: Assign System Admin role to the new user
    const assignResponse = await request.post(`/admin/sys-admin/users/${newUser.id}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
    expect(assignResponse.status()).toBe(201);
    console.log(`Assigned System Admin role to user: ${newUser.id}`);

    // GET: List users with the system-admin role and verify the new user is in the list
    const listResponse = await request.get('/admin/sys-admin/users', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
    expect(listResponse.status()).toBe(200);
    const sysAdmins = await listResponse.json();
    const isSysAdmin = sysAdmins.some(user => user.id === newUser.id);
    expect(isSysAdmin).toBe(true);

    // DELETE: Unassign System Admin role from the user
    const unassignResponse = await request.delete(`/admin/sys-admin/users/${newUser.id}`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
    expect(unassignResponse.status()).toBe(200);
    console.log(`Unassigned System Admin role from user: ${newUser.id}`);

    // GET: Verify the user is no longer in the system-admin list
    const updatedListResponse = await request.get('/admin/sys-admin/users', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });
    expect(updatedListResponse.status()).toBe(200);
    const updatedSysAdmins = await updatedListResponse.json();
    const isStillSysAdmin = updatedSysAdmins.some(user => user.id === newUser.id);
    expect(isStillSysAdmin).toBe(false);
  });
});
