import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// Base URL for the API
const BASE_URL = 'https://iams.qa.agilopshub.com';

let newGroupId;
let newUserId;
let accessToken;
let tenantId;
let newRolesData = []; // Array to store the full data of the newly created roles

// Use test.describe.serial to ensure tests run in order.
// This is necessary because subsequent tests depend on the `newGroupId` and `newUserId` created in the first tests.
test.describe.serial('Tenant Groups API Tests', () => {

    // Set a longer timeout for this specific test suite
    test.setTimeout(120000); // 120 seconds

    // Setup hook to read the access token and tenant ID
    test.beforeAll(async ({ request }) => {
        try {
            // Read the access token from the file generated by global-setup.js
            const authFile = JSON.parse(fs.readFileSync(path.join(__dirname, '../playwright/.auth/auth.json'), 'utf8'));
            accessToken = authFile.accessToken;
            if (!accessToken) {
                throw new Error('Access token not found in auth.json');
            }
            console.log("Access Token loaded successfully.");

            // Read the tenant ID from the file generated by tenants.spec.js
            const tenantFile = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'data', 'tenant.json'), 'utf8'));
            tenantId = tenantFile.tenantId;
            if (!tenantId) {
                throw new Error('Tenant ID not found in data/tenant.json. Please run tenants.spec.js first.');
            }
            console.log(`Tenant ID ${tenantId} loaded successfully.`);

        } catch (error) {
            console.error("Failed to load setup data:", error.message);
            throw error; // Terminate the test run if the data cannot be loaded
        }
    });

    // --- Role Creation Tests ---
    test('should create two new roles', async ({ request }) => {
        const rolesToCreate = ['GroupAdmin', 'GroupViewer'];
        for (const roleName of rolesToCreate) {
            const createRoleData = {
                name: roleName,
                description: `Test role for group API tests: ${roleName}`
            };

            const response = await request.post(`${BASE_URL}/admin/tenants/${tenantId}/roles`, {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                },
                data: createRoleData
            });

            console.log(`Create role "${roleName}" response status: ${response.status()}`);
            if (!response.ok()) {
                const errorBody = await response.text();
                console.log(`Error Response Body: ${errorBody}`);
            }
            
            expect(response.status()).toBe(201);
            
            // The API returns the new role ID as a raw string. We'll need to fetch the full details.
            const newRoleId = await response.text();
            console.log(`New role "${roleName}" created with ID: ${newRoleId.trim()}`);

            // Now, get the full role object to use later for assignment
            const getRoleResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/roles/${newRoleId.trim()}`, {
                 headers: { 'Authorization': `Bearer ${accessToken}` }
            });

            if (getRoleResponse.ok()) {
                const fullRoleData = await getRoleResponse.json();
                newRolesData.push(fullRoleData);
            } else {
                console.error(`Failed to fetch full role data for ID: ${newRoleId.trim()}`);
            }
        }
        expect(newRolesData.length).toBe(2);
    });

    // --- Original Group/User Tests Start Here ---
    
    // Test to create a new tenant group
    test('should create a new tenant group', async ({ request }) => {
        const createGroupData = {
            name: `TestGroup-${Date.now()}`,
            description: "Playwright API test group"
        };
        // Corrected API endpoint to include tenantId
        const response = await request.post(`${BASE_URL}/admin/tenants/${tenantId}/groups`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json' // Explicitly set Content-Type header
            },
            data: createGroupData
        });

        console.log(`Response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        expect(response.status()).toBe(201);
        
        // The API returns the new group ID as a raw string, not a JSON object.
        const responseBodyText = await response.text();
        newGroupId = responseBodyText.trim();
        
        console.log(`New Group ID created: ${newGroupId}`);
        expect(newGroupId).toBeDefined();
    });

    // Test to get the list of tenant groups and verify the newly created group is in the list
    test('should retrieve the list of groups and find the new group', async ({ request }) => {
        expect(newGroupId).toBeDefined();

        // Corrected API endpoint to include tenantId
        const response = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/groups`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        expect(response.status()).toBe(200);
        
        // The API returns a simple array of groups, not a paginated object.
        const responseBody = await response.json();
        
        expect(Array.isArray(responseBody)).toBe(true);
        expect(responseBody.length).toBeGreaterThan(0);

        const groupFound = responseBody.some(group => group.id === newGroupId);
        expect(groupFound).toBe(true);
    });

    // Test to get group details by ID
    test('should get group details by ID', async ({ request }) => {
        expect(newGroupId).toBeDefined();

        // Corrected API endpoint to include tenantId
        const response = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        expect(response.status()).toBe(200);
        const responseBody = await response.json();

        expect(responseBody.id).toBe(newGroupId);
    });

    // Test to update an existing tenant group
    test('should update an existing tenant group', async ({ request }) => {
        expect(newGroupId).toBeDefined();

        const updatedData = {
            name: `TestGroup-Updated-${Date.now()}`,
            description: "Updated description for test group",
            id: newGroupId
        };

        // Corrected API endpoint to include tenantId
        const response = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            },
            data: updatedData
        });

        // We are only checking the status, as the API returns a successful status
        // but no JSON body to parse.
        expect(response.status()).toBe(200);
        console.log(`Update response status: ${response.status()}`);

        const responseBodyText = await response.text();
        if (responseBodyText) {
            console.log(`Update response body (if any): ${responseBodyText}`);
        } else {
            console.log("Update response body was empty.");
        }
    });

    // Test to create a new user
    test('should create a new user', async ({ request }) => {
        const createUserData = {
            email: `testuser-${Date.now()}@test.com`,
            username: `testuser-${Date.now()}`,
            password: `Password123`
        };

        const response = await request.post(`${BASE_URL}/admin/users`, { 
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: createUserData
        });

        expect(response.status()).toBe(201);
        const responseBodyText = await response.text();
        newUserId = responseBodyText.trim();
        console.log(`New User ID created: ${newUserId}`);
        expect(newUserId).toBeDefined();
    });

    // FIX: This test now uses the correct endpoint and request body to add the user to the tenant.
    test('should add user to the tenant', async ({ request }) => {
        expect(newUserId).toBeDefined();

        const response = await request.post(`${BASE_URL}/admin/tenants/${tenantId}/memberships/${newUserId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: {
                role: 'member'
            }
        });

        console.log(`Add user to tenant response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        // The user's example shows the API returns 201 Created on success
        expect(response.status()).toBe(201);
    });

    // All the remaining tests are now enabled
    test('should assign a user to the group', async ({ request }) => {
        expect(newGroupId).toBeDefined();
        expect(newUserId).toBeDefined();

        // FIX: Using the correct URI from the API documentation
        // The user and group IDs are in the URL path, so no request body is needed.
        const response = await request.put(`${BASE_URL}/admin/tenants/${tenantId}/users/${newUserId}/groups/${newGroupId}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        
        console.log(`Assign user response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        expect(response.status()).toBe(200);
    });

    // FIX: This test now uses the IDs of the newly created roles
    test('should assign a role to the group', async ({ request }) => {
        expect(newGroupId).toBeDefined();
        expect(newRolesData.length).toBe(2);

        // The API expects a direct array of role objects with all fields
        // We now use the full objects we stored earlier
        const assignmentData = newRolesData;

        // Correct endpoint from the API docs
        const response = await request.post(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}/roles`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: assignmentData
        });

        console.log(`Assign role response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        expect(response.status()).toBe(201);
    });

    // --- New Test for Listing Group Roles ---
    test('should list group roles', async ({ request }) => {
        expect(newGroupId).toBeDefined();
        expect(newRolesData.length).toBe(2);

        const response = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}/roles`, {
            headers: { 'Authorization': `Bearer ${accessToken}` }
        });

        console.log(`List group roles response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        expect(response.status()).toBe(200);
        const rolesList = await response.json();

        expect(Array.isArray(rolesList)).toBe(true);
        expect(rolesList.length).toBe(newRolesData.length);

        const assignedRoleIds = rolesList.map(role => role.id);
        const expectedRoleIds = newRolesData.map(role => role.id);

        expectedRoleIds.forEach(roleId => {
            expect(assignedRoleIds).toContain(roleId);
        });
    });

    // FIX: This test now uses the correct endpoint and request body based on the API docs.
    test('should assign a subgroup to a group', async ({ request }) => {
        expect(newGroupId).toBeDefined();
        
        const subGroupData = {
            name: `TestSubGroup-${Date.now()}`
        };

        const response = await request.post(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}/children`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            data: subGroupData
        });

        console.log(`Assign subgroup response status: ${response.status()}`);
        if (!response.ok()) {
            const errorBody = await response.text();
            console.log(`Error Response Body: ${errorBody}`);
        }

        expect(response.status()).toBe(201);
    });

    test('should delete the tenant group and user and the new roles', async ({ request }) => {
        // Delete the roles
        for (const role of newRolesData) {
            const deleteRoleResponse = await request.delete(`${BASE_URL}/admin/tenants/${tenantId}/roles/${role.id}`, {
                headers: { 'Authorization': `Bearer ${accessToken}` }
            });
            expect(deleteRoleResponse.status()).toBe(200);
            console.log(`Role ${role.id} deleted successfully.`);
        }

        // Delete the user
        if (newUserId) {
            const deleteUserResponse = await request.delete(`${BASE_URL}/admin/tenants/${tenantId}/users/${newUserId}`, {
                headers: { 'Authorization': `Bearer ${accessToken}` }
            });
            expect(deleteUserResponse.status()).toBe(200);
            console.log(`User ${newUserId} deleted successfully.`);
        }

        // Delete the group
        if (newGroupId) {
            const deleteGroupResponse = await request.delete(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}`, {
                headers: { 'Authorization': `Bearer ${accessToken}` }
            });
            expect(deleteGroupResponse.status()).toBe(200);
            console.log(`Group ${newGroupId} deleted successfully.`);

            // Optionally, try to get the group again to confirm it's deleted
            const getResponse = await request.get(`${BASE_URL}/admin/tenants/${tenantId}/groups/${newGroupId}`, {
                headers: { 'Authorization': `Bearer ${accessToken}` }
            });
            expect(getResponse.status()).toBe(404);
        }
    });
});
